// useGetBudgets.js
import { useEffect, useState } from 'react';
import { collection, getDocs } from 'firebase/firestore';
import { useGetUserInfo } from './useGetUserInfo';
import { db } from '../config/firebase-config';

export const useGetBudgets = () => {
  const [budgets, setBudgets] = useState([]);
  const { userID } = useGetUserInfo();

  const fetchBudgets = async () => {
    try {
      // Query budgets collection for the current user
      const querySnapshot = await getDocs(collection(db, 'budgets'));
      
      // Get current month and year
      const currentDate = new Date();
      const currentMonth = currentDate.getMonth();
      const currentYear = currentDate.getFullYear();
      
      // Filter budgets for the current month and year
      const budgetData = querySnapshot.docs
        .filter(doc => doc.data().userID === userID)
        .filter(doc => {
          const date = doc.data().date.toDate(); // Assuming date field is a Firestore Timestamp
          return date.getMonth() === currentMonth && date.getFullYear() === currentYear;
        })
        .map(doc => ({
          id: doc.id,
          ...doc.data(),
        }));

      setBudgets(budgetData);
    } catch (error) {
      console.error('Error fetching budgets', error);
    }
  };

  useEffect(() => {
    // Fetch budgets when userID changes
    fetchBudgets();
  }, [userID]);

  return { budgets, fetchBudgets };
};
